generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  STAFF
  CUSTOMER
}

enum Status {
  IN_PROGRESS
  IS_PENDING
  IS_SUCCESS
  IS_CANCELLED
  DELIVERED
  RETURNED
  REFUNDED
  // Add more status options as needed
}

model User {
  id        Int           @id @default(autoincrement())
  cart      ShoppingCart?
  orders    Order[]
  // realtion ship
  addresses Address[]
  rating    Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String  @unique
  password       String
  firstName      String?
  lastName       String?
  role           Role    @default(USER)
  phone          String?
  refresh_token  String?
  expires_at     Int?
  shoppingCartId Int?
}

model Address {
  id          Int    @id @default(autoincrement())
  accountId   Int
  account     User   @relation(fields: [accountId], references: [id])
  nameAddress String
}

model Receipt {
  id     Int @id @default(autoincrement())
  shopId Int
  nameShop String
  createdAt     DateTime        @default(now())
  nameReceipt   String
  totalPrice    Decimal
  receiptDetail ReceiptDetail[]
}

model ReceiptDetail {
  id             Int     @id @default(autoincrement())
  receiptId      Int // Corrected field name
  receipt        Receipt @relation(fields: [receiptId], references: [id])
  name           String
  mainImage      String
  options        Json
  category       Int
  description    String
  subDescription String
  price          Decimal
}

model Shop {
  id      Int    @id @default(autoincrement())
  name    String
  address String
}

model ShoppingCart {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  products  ShoppingCartProduct[]
  createdAt DateTime              @default(now())
}

model ShoppingCartProduct {
  shoppingCartId Int
  quantity       Int

  dateAdd                 DateTime       @default(now())
  productOptionsProductId Int
  productOptionsSizeId    Int
  productOptionsColorId   Int
  productOption           ProductOptions @relation(fields: [productOptionsProductId, productOptionsSizeId, productOptionsColorId], references: [productId, sizeId, colorId])

  shoppingCart ShoppingCart @relation(fields: [shoppingCartId], references: [id])

  @@id([shoppingCartId, productOptionsProductId, productOptionsSizeId, productOptionsColorId])
}

model Order {
  id          Int           @id @default(autoincrement())
  userId      Int
  address     String
  status      Status
  total       Decimal
  user        User          @relation(fields: [userId], references: [id])
  OrderDetail OrderDetail[]
}

model OrderDetail {
  orderId Int

  quantity                Int
  dateAdd                 DateTime       @default(now())
  productOptionsProductId Int
  productOptionsSizeId    Int
  productOptionsColorId   Int
  productOption           ProductOptions @relation(fields: [productOptionsProductId, productOptionsSizeId, productOptionsColorId], references: [productId, sizeId, colorId])
  order                   Order          @relation(fields: [orderId], references: [id])

  @@id([orderId, productOptionsProductId, productOptionsSizeId, productOptionsColorId])
}

//  Definde order Product schema
model Product {
  id             Int      @id @default(autoincrement())
  name           String
  mainImage      String
  description    String
  subDescription String
  price          Decimal
  rating         Rating[]

  options ProductOptions[]

  categoryId Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
}

model ProductOptions {
  productId           Int
  sizeId              Int
  colorId             Int
  quantity            Int
  images              Image[]
  OrderDetail         OrderDetail[]
  ShoppingCartProduct ShoppingCartProduct[]

  Product Product @relation(fields: [productId], references: [id])
  Size    Size    @relation(fields: [sizeId], references: [id])
  Color   Color   @relation(fields: [colorId], references: [id])

  @@id([productId, sizeId, colorId])
}

model Rating {
  id      Int      @id @default(autoincrement())
  rating  Int
  comment String
  dateAdd DateTime @default(now())

  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Size {
  id      Int              @id @default(autoincrement())
  name    String
  caption String?
  option  ProductOptions[]
}

model Color {
  id        Int    @id @default(autoincrement())
  color     String
  codeColor String

  option ProductOptions[]
}

model Image {
  id                      Int             @id @default(autoincrement())
  filePath                String
  caption                 String?
  ProductOptions          ProductOptions? @relation(fields: [productOptionsProductId, productOptionsSizeId, productOptionsColorId], references: [productId, sizeId, colorId])
  productOptionsProductId Int?
  productOptionsSizeId    Int?
  productOptionsColorId   Int?
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[]
}

model Discount {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  dateStart   DateTime
  dateEnd     DateTime
  percent     Float
}
